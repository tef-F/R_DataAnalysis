Num_Major_Vessels_Flouro,
everything())
#Glimpse data
heart_dataset_clean_tbl %>%
glimpse()
d = read.csv("dataset/heart_statlog.data.csv")
heart_disease_dataset <- d
#Prepare column names
names <- c("Age",
"Sex",
"Chest_Pain_Type",
"Resting_Blood_Pressure",
"Serum_Cholesterol",
"Fasting_Blood_Sugar",
"Resting_ECG",
"Max_Heart_Rate_Achieved",
"Exercise_Induced_Angina",
"ST_Depression_Exercise",
"Peak_Exercise_ST_Segment",
"Num_Major_Vessels_Flouro",
"Thalassemia",
"Diagnosis_Heart_Disease")
#Apply column names to the dataframe
colnames(heart_disease_dataset) <- names
#Glimpse data to verify new column names are in place
heart_disease_dataset %>% glimpse()
#Determine the number of values in each level of dependent variable
#Thong ke cac chuan doan bi benh tim hay khong
diagnosis_heart_disease = heart_disease_dataset %>%
drop_na() %>%
group_by(Diagnosis_Heart_Disease) %>%
count() %>%
ungroup() %>%kable(align = rep("c", 2)) %>% kable_styling("full_width" = F)
diagnosis_heart_disease
#Identify the different levels of Thalassemia
thalassemia = heart_disease_dataset %>%
drop_na() %>%
group_by(Thalassemia) %>%
count() %>%
ungroup() %>%
kable(align = rep("c", 2)) %>% kable_styling("full_width" = F)
thalassemia
#Drop NA's, convert to factors, lump target variable to 2 levels, remove "?", reorder variables
heart_dataset_clean_tbl <- heart_disease_dataset %>%
drop_na() %>%
mutate_at(c("Resting_ECG",
"Fasting_Blood_Sugar",
"Sex",
"Diagnosis_Heart_Disease",
"Exercise_Induced_Angina",
"Peak_Exercise_ST_Segment",
"Chest_Pain_Type"), as_factor) %>%
mutate(Num_Major_Vessels_Flouro = as.numeric(Num_Major_Vessels_Flouro)) %>%
mutate(Diagnosis_Heart_Disease = fct_lump(Diagnosis_Heart_Disease,n = 1, other_level = "1")) %>%
filter(Thalassemia != "?") %>%
select(Age,
Resting_Blood_Pressure,
Serum_Cholesterol,
Max_Heart_Rate_Achieved,
ST_Depression_Exercise,
Num_Major_Vessels_Flouro,
everything())
#Glimpse data
heart_dataset_clean_tbl %>%
glimpse()
View(heart_dataset_clean_tbl)
hd_long_fact_tbl %>%
ggplot(aes(value)) +
geom_bar(aes(x        = value,
fill     = Diagnosis_Heart_Disease),
alpha    = .6,
position = "dodge",
color    = "black",
width    = .8
) +
labs(x = "",
y = "",
title = "Scaled Effect of Categorical Variables") +
theme(
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()) +
facet_wrap(~ key, scales = "free", nrow = 4) +
scale_fill_manual(
values = c("#fde725ff", "#20a486ff"),
name   = "Heart\nDisease",
labels = c("No HD", "Yes HD"))
#Visualize with bar plot
hd_long_fact_tbl %>%
ggplot(aes(value)) +
geom_bar(aes(x        = value,
fill     = Diagnosis_Heart_Disease),
alpha    = .6,
position = "dodge",
color    = "black",
width    = .8
) +
labs(x = "",
y = "",
title = "Scaled Effect of Categorical Variables") +
theme(
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()) +
facet_wrap(~ key, scales = "free", nrow = 4) +
scale_fill_manual(
values = c("#fde725ff", "#20a486ff"),
name   = "Heart\nDisease",
labels = c("No HD", "Yes HD"))
d = read.csv("dataset/heart_statlog.data.csv")
heart_disease_dataset <- d
server = function(input, output, session) {
data_temp = data.frame(heart_disease_dataset)
observeEvent(input$cb_clean, {
if(input$cb_clean == 1) {
output$Test = renderText("Test")
}
})
updateCheckboxGroupInput(session, inputId = "field", choices = names(data_temp),selected = names(data_temp))
output$result = renderPrint({
paste(url, sep = "/", input$dataset)
})
output$table = renderDataTable(
data_temp[, input$field , drop = FALSE],
options = list(
searching = TRUE,
scrollX=TRUE
)
)
output$plot = renderPlotly({
# cor = cor(matrix(rnorm(100), ncol = 10))
corr = round(cor(d), 1)
ggplotly(ggcorrplot(corr, hc.order = TRUE, type = "lower", lab = TRUE))
})
output$summary = renderPrint(summary(data_temp))
#Prepare column names
names <- c("Age",
"Sex",
"Chest_Pain_Type",
"Resting_Blood_Pressure",
"Serum_Cholesterol",
"Fasting_Blood_Sugar",
"Resting_ECG",
"Max_Heart_Rate_Achieved",
"Exercise_Induced_Angina",
"ST_Depression_Exercise",
"Peak_Exercise_ST_Segment",
"Num_Major_Vessels_Flouro",
"Thalassemia",
"Diagnosis_Heart_Disease")
#Apply column names to the dataframe
colnames(heart_disease_dataset) <- names
#Glimpse data to verify new column names are in place
heart_disease_dataset %>% glimpse()
#Determine the number of values in each level of dependent variable
#Thong ke cac chuan doan bi benh tim hay khong
diagnosis_heart_disease = heart_disease_dataset %>%
drop_na() %>%
group_by(Diagnosis_Heart_Disease) %>%
count() %>%
ungroup() %>%kable(align = rep("c", 2)) %>% kable_styling("full_width" = F)
diagnosis_heart_disease
#Identify the different levels of Thalassemia
thalassemia = heart_disease_dataset %>%
drop_na() %>%
group_by(Thalassemia) %>%
count() %>%
ungroup() %>%
kable(align = rep("c", 2)) %>% kable_styling("full_width" = F)
thalassemia
#Drop NA's, convert to factors, lump target variable to 2 levels, remove "?", reorder variables
heart_dataset_clean_tbl <- heart_disease_dataset %>%
drop_na() %>%
mutate_at(c("Resting_ECG",
"Fasting_Blood_Sugar",
"Sex",
"Diagnosis_Heart_Disease",
"Exercise_Induced_Angina",
"Peak_Exercise_ST_Segment",
"Chest_Pain_Type"), as_factor) %>%
mutate(Num_Major_Vessels_Flouro = as.numeric(Num_Major_Vessels_Flouro)) %>%
mutate(Diagnosis_Heart_Disease = fct_lump(Diagnosis_Heart_Disease,n = 1, other_level = "1")) %>%
filter(Thalassemia != "?") %>%
select(Age,
Resting_Blood_Pressure,
Serum_Cholesterol,
Max_Heart_Rate_Achieved,
ST_Depression_Exercise,
Num_Major_Vessels_Flouro,
everything())
#Glimpse data
heart_dataset_clean_tbl %>%
glimpse()
hd_long_fact_tbl <- heart_dataset_clean_tbl  %>%
select(Sex,
Chest_Pain_Type,
Fasting_Blood_Sugar,
Resting_ECG,
Exercise_Induced_Angina,
Peak_Exercise_ST_Segment,
Thalassemia,
Diagnosis_Heart_Disease) %>%
mutate(Sex = recode_factor(Sex, `0` = "female",
`1` = "male" ),
Chest_Pain_Type = recode_factor(Chest_Pain_Type, `1` = "typical",
`2` = "atypical",
`3` = "non-angina",
`4` = "asymptomatic"),
Fasting_Blood_Sugar = recode_factor(Fasting_Blood_Sugar, `0` = "<= 120 mg/dl",
`1` = "> 120 mg/dl"),
Resting_ECG = recode_factor(Resting_ECG, `0` = "normal",
`1` = "ST-T abnormality",
`2` = "LV hypertrophy"),
Exercise_Induced_Angina = recode_factor(Exercise_Induced_Angina, `0` = "no",
`1` = "yes"),
Peak_Exercise_ST_Segment = recode_factor(Peak_Exercise_ST_Segment, `1` = "up-sloaping",
`2` = "flat",
`3` = "down-sloaping"),
Thalassemia = recode_factor(Thalassemia, `3` = "normal",
`6` = "fixed defect",
`7` = "reversible defect")) %>%
gather(key = "key", value = "value", -Diagnosis_Heart_Disease)
#Visualize with bar plot
hd_long_fact_tbl %>%
ggplot(aes(value)) +
geom_bar(aes(x        = value,
fill     = Diagnosis_Heart_Disease),
alpha    = .6,
position = "dodge",
color    = "black",
width    = .8
) +
labs(x = "",
y = "",
title = "Scaled Effect of Categorical Variables") +
theme(
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()) +
facet_wrap(~ key, scales = "free", nrow = 4) +
scale_fill_manual(
values = c("#fde725ff", "#20a486ff"),
name   = "Heart\nDisease",
labels = c("No HD", "Yes HD"))
}
library(shiny)
library(shinythemes)
library(DT)
library(markdown)
library(dplyr)
library(plotly)
library(ggplot2)
library(ggcorrplot)
library(lattice)
library(caret)
library(shinydashboard)
#Libraries main
library(tidyverse)
library(kableExtra)
library(rsample)
library(recipes)
library(parsnip)
library(yardstick)
library(viridisLite)
library(GGally)
options(shiny.host = '0.0.0.0')
options(shiny.port = 3030)
url = "dataset"
library(shiny)
library(shinythemes)
library(DT)
library(markdown)
library(dplyr)
library(plotly)
library(ggplot2)
library(ggcorrplot)
library(lattice)
library(caret)
library(shinydashboard)
#Libraries main
library(tidyverse)
library(kableExtra)
library(rsample)
library(recipes)
library(parsnip)
library(yardstick)
library(viridisLite)
library(GGally)
#Visualize with bar plot
hd_long_fact_tbl %>%
ggplot(aes(value)) +
geom_bar(aes(x        = value,
fill     = Diagnosis_Heart_Disease),
alpha    = .6,
position = "dodge",
color    = "black",
width    = .8
) +
labs(x = "",
y = "",
title = "Scaled Effect of Categorical Variables") +
theme(
axis.text.y  = element_blank(),
axis.ticks.y = element_blank()) +
facet_wrap(~ key, scales = "free", nrow = 4) +
scale_fill_manual(
values = c("#fde725ff", "#20a486ff"),
name   = "Heart\nDisease",
labels = c("No HD", "Yes HD"))
#Select categorical vars, recode them to their character values, convert to long format
hd_long_fact_tbl <- heart_dataset_clean_tbl  %>%
select(Sex,
Chest_Pain_Type,
Fasting_Blood_Sugar,
Resting_ECG,
Exercise_Induced_Angina,
Peak_Exercise_ST_Segment,
Thalassemia,
Diagnosis_Heart_Disease) %>%
mutate(Sex = recode_factor(Sex, `0` = "female",
`1` = "male" ),
Chest_Pain_Type = recode_factor(Chest_Pain_Type, `1` = "typical",
`2` = "atypical",
`3` = "non-angina",
`4` = "asymptomatic"),
Fasting_Blood_Sugar = recode_factor(Fasting_Blood_Sugar, `0` = "<= 120 mg/dl",
`1` = "> 120 mg/dl"),
Resting_ECG = recode_factor(Resting_ECG, `0` = "normal",
`1` = "ST-T abnormality",
`2` = "LV hypertrophy"),
Exercise_Induced_Angina = recode_factor(Exercise_Induced_Angina, `0` = "no",
`1` = "yes"),
Peak_Exercise_ST_Segment = recode_factor(Peak_Exercise_ST_Segment, `1` = "up-sloaping",
`2` = "flat",
`3` = "down-sloaping"),
Thalassemia = recode_factor(Thalassemia, `3` = "normal",
`6` = "fixed defect",
`7` = "reversible defect")) %>%
gather(key = "key", value = "value", -Diagnosis_Heart_Disease)
hd_long_fact_tbl <- heart_dataset_clean_tbl  %>%
select(Sex,
Chest_Pain_Type,
Fasting_Blood_Sugar,
Resting_ECG,
Exercise_Induced_Angina,
Peak_Exercise_ST_Segment,
Thalassemia,
Diagnosis_Heart_Disease) %>%
mutate(Sex = recode_factor(Sex, `0` = "female",
`1` = "male" ),
Chest_Pain_Type = recode_factor(Chest_Pain_Type, `1` = "typical",
`2` = "atypical",
`3` = "non-angina",
`4` = "asymptomatic"),
Fasting_Blood_Sugar = recode_factor(Fasting_Blood_Sugar, `0` = "<= 120 mg/dl",
`1` = "> 120 mg/dl"),
Resting_ECG = recode_factor(Resting_ECG, `0` = "normal",
`1` = "ST-T abnormality",
`2` = "LV hypertrophy"),
Exercise_Induced_Angina = recode_factor(Exercise_Induced_Angina, `0` = "no",
`1` = "yes"),
Peak_Exercise_ST_Segment = recode_factor(Peak_Exercise_ST_Segment, `1` = "up-sloaping",
`2` = "flat",
`3` = "down-sloaping"),
Thalassemia = recode_factor(Thalassemia, `3` = "normal",
`6` = "fixed defect",
`7` = "reversible defect")) %>%
gather(key = "key", value = "value", -Diagnosis_Heart_Disease)
d = read.csv("dataset/heart_statlog.data.csv")
heart_disease_dataset <- d
#Prepare column names
names <- c("Age",
"Sex",
"Chest_Pain_Type",
"Resting_Blood_Pressure",
"Serum_Cholesterol",
"Fasting_Blood_Sugar",
"Resting_ECG",
"Max_Heart_Rate_Achieved",
"Exercise_Induced_Angina",
"ST_Depression_Exercise",
"Peak_Exercise_ST_Segment",
"Num_Major_Vessels_Flouro",
"Thalassemia",
"Diagnosis_Heart_Disease")
#Apply column names to the dataframe
colnames(heart_disease_dataset) <- names
#Glimpse data to verify new column names are in place
heart_disease_dataset %>% glimpse()
library(shiny)
library(shinythemes)
library(DT)
library(markdown)
library(dplyr)
library(plotly)
library(ggplot2)
library(ggcorrplot)
library(lattice)
library(caret)
library(shinydashboard)
#Libraries main
library(tidyverse)
library(kableExtra)
library(rsample)
library(recipes)
library(parsnip)
library(yardstick)
library(viridisLite)
library(GGally)
hd_long_fact_tbl <- heart_dataset_clean_tbl  %>%
select(Sex,
Chest_Pain_Type,
Fasting_Blood_Sugar,
Resting_ECG,
Exercise_Induced_Angina,
Peak_Exercise_ST_Segment,
Thalassemia,
Diagnosis_Heart_Disease) %>%
mutate(Sex = recode_factor(Sex, `0` = "female",
`1` = "male" ),
Chest_Pain_Type = recode_factor(Chest_Pain_Type, `1` = "typical",
`2` = "atypical",
`3` = "non-angina",
`4` = "asymptomatic"),
Fasting_Blood_Sugar = recode_factor(Fasting_Blood_Sugar, `0` = "<= 120 mg/dl",
`1` = "> 120 mg/dl"),
Resting_ECG = recode_factor(Resting_ECG, `0` = "normal",
`1` = "ST-T abnormality",
`2` = "LV hypertrophy"),
Exercise_Induced_Angina = recode_factor(Exercise_Induced_Angina, `0` = "no",
`1` = "yes"),
Peak_Exercise_ST_Segment = recode_factor(Peak_Exercise_ST_Segment, `1` = "up-sloaping",
`2` = "flat",
`3` = "down-sloaping"),
Thalassemia = recode_factor(Thalassemia, `3` = "normal",
`6` = "fixed defect",
`7` = "reversible defect")) %>%
gather(key = "key", value = "value", -Diagnosis_Heart_Disease)
View(server)
View(server)
View(server)
View(server)
View(server)
View(server)
heart_dataset_clean_tbl %>% ggcorr(high       = "#20a486ff",
low        = "#fde725ff",
label      = TRUE,
hjust      = .75,
size       = 3,
label_size = 3,
nbreaks    = 5
) +
labs(title = "Correlation Matrix",
subtitle = "Pearson Method Using Pairwise Obervations")
}
runApp()
hd_long_fact_tbl <- heart_dataset_clean_tbl  %>%
select(Sex,
Chest_Pain_Type,
Fasting_Blood_Sugar,
Resting_ECG,
Exercise_Induced_Angina,
Peak_Exercise_ST_Segment,
Thalassemia,
Diagnosis_Heart_Disease) %>%
mutate(Sex = recode_factor(Sex, `0` = "female",
`1` = "male" ),
Chest_Pain_Type = recode_factor(Chest_Pain_Type, `1` = "typical",
`2` = "atypical",
`3` = "non-angina",
`4` = "asymptomatic"),
Fasting_Blood_Sugar = recode_factor(Fasting_Blood_Sugar, `0` = "<= 120 mg/dl",
`1` = "> 120 mg/dl"),
Resting_ECG = recode_factor(Resting_ECG, `0` = "normal",
`1` = "ST-T abnormality",
`2` = "LV hypertrophy"),
Exercise_Induced_Angina = recode_factor(Exercise_Induced_Angina, `0` = "no",
`1` = "yes"),
Peak_Exercise_ST_Segment = recode_factor(Peak_Exercise_ST_Segment, `1` = "up-sloaping",
`2` = "flat",
`3` = "down-sloaping"),
Thalassemia = recode_factor(Thalassemia, `3` = "normal",
`6` = "fixed defect",
`7` = "reversible defect")) %>%
gather(key = "key", value = "value", -Diagnosis_Heart_Disease)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
broom::tidy(log_regr_hd_model$fit) %>%
arrange(desc(estimate)) %>%
mutate(odds_ratio = exp(estimate)) %>%
kable(align = rep("c", 5), digits = 3) %>%
kable_styling("full_width" = FALSE,
latex_options = "basic",
wraptable_width = "1pt",
bootstrap_options = "bordered")
conf_matrix_plt_obj %>%
ggplot(aes(x = Truth, y = Prediction)) +
geom_tile(aes(fill = n), alpha = .8) +
geom_text(aes(label = n), color = "white") +
scale_fill_viridis_c() +
theme(legend.title = element_blank()) +
labs(
title = "Confusion Matrix",
subtitle = "Heart Disease Prediction Using Logistic Regression"
)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
